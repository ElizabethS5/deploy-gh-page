{"version":3,"sources":["components/form/Form.js","components/instructions2/Instructions2.js","components/instructions/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Form","update","name","onChange","value","type","placeholder","Instructions2","openingTag","repo","Fragment","Instructions","ghname","manager","intialData","App","props","useState","formData","setFormData","className","event","newFormData","target","trim","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTA0BeA,MAvBf,YAA2B,IAAXC,EAAU,EAAVA,OACd,OACE,8BACE,4BAAQC,KAAK,UAAUC,SAAUF,GAC/B,4BAAQG,MAAO,QAAf,QACA,4BAAQA,MAAO,OAAf,QAEF,2BACEC,KAAK,OACLH,KAAK,SACLI,YAAY,kBACZH,SAAUF,IAEZ,2BACEI,KAAK,OACLH,KAAK,OACLI,YAAY,mBACZH,SAAUF,M,MCFHM,MAhBf,YAAkC,IAC5BC,EAAa,6BADc,EAARC,KACgC,MAGvD,OACE,kBAAC,IAAMC,SAAP,KACE,+DACA,2FACA,6BACGF,EADH,IACe,6BADf,IANM,UAMN,IAC4B,6BANf,sBC8BJG,MA/Bf,YAAkD,IAA1BC,EAAyB,EAAzBA,OAAQH,EAAiB,EAAjBA,KAAMI,EAAW,EAAXA,QACpC,OACE,6BACE,qCACA,+CACA,6BACe,SAAZA,EAAqB,WAAa,cADrC,wBAIA,gEACA,oDACuBD,EADvB,cAEGH,EAFH,KAKA,8DACA,8CACiBI,EADjB,eAEE,6BAFF,iCAMA,0CACA,sFACA,+CACA,6BAAMA,EAAN,eACA,kBAAC,EAAD,CAAeJ,KAAMA,MCzBrBK,EAAa,CACjBF,OAAQ,oBACRH,KAAM,qBACNI,QAAS,QAwBIE,MArBf,SAAaC,GACX,MAAgCC,mBAASH,GAAzC,mBAAOI,EAAP,KAAiBC,EAAjB,KAWA,OACE,yBAAKC,UAAU,OACb,uEACA,kBAAC,EAAD,CAAMnB,OAZK,SAACoB,GACd,IAAIC,EAAW,eAAQJ,GACvBI,EAAYD,EAAME,OAAOrB,MACvBmB,EAAME,OAAOnB,MAAMoB,OAAOC,OAAS,EAC/BJ,EAAME,OAAOnB,MACbU,EAAWO,EAAME,OAAOrB,MAC9BiB,EAAYG,MAOV,kBAAC,EAAiBJ,KCfJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.30666dd8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Form.css\";\n\nfunction Form({ update }) {\n  return (\n    <form>\n      <select name=\"manager\" onChange={update}>\n        <option value={\"yarn\"}>yarn</option>\n        <option value={\"npm\"}>npm</option>\n      </select>\n      <input\n        type=\"text\"\n        name=\"ghname\"\n        placeholder=\"GitHub Username\"\n        onChange={update}\n      />\n      <input\n        type=\"text\"\n        name=\"repo\"\n        placeholder=\"GitHub repo name\"\n        onChange={update}\n      />\n    </form>\n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction Instructions2({ repo }) {\n  let openingTag = '<BrowserRouter basename=\"/' + repo + '\" >';\n  let app = \"<App />\";\n  let closingTag = \"</BrowserRouter>\";\n  return (\n    <React.Fragment>\n      <h2>For apps that use BrowserRouter</h2>\n      <p>In the index.js file, add basename property to BrowserRouter</p>\n      <pre>\n        {openingTag} <br /> {app} <br />\n        {closingTag}\n      </pre>\n    </React.Fragment>\n  );\n}\n\nexport default Instructions2;\n","import React from \"react\";\nimport \"./Instructions.css\";\nimport Instructions2 from \"../instructions2/Instructions2\";\n\nfunction Instructions({ ghname, repo, manager }) {\n  return (\n    <div>\n      <h2>Setup</h2>\n      <p>In the terminal:</p>\n      <pre>\n        {manager === \"yarn\" ? \"yarn add\" : \"npm install\"} gh-pages --save-dev\n      </pre>\n\n      <p>In package.json JSON object, add:</p>\n      <pre>\n        \"homepage\": \"http://{ghname}.github.io/\n        {repo}\"\n      </pre>\n\n      <p>In package.json \"scripts\", add:</p>\n      <pre>\n        \"predeploy\": \"{manager} run build\",\n        <br />\n        \"deploy\": \"gh-pages -d build\"\n      </pre>\n\n      <h2>Deployment</h2>\n      <p>Add, commit, and push changes to your GitHub repository</p>\n      <p>In the terminal:</p>\n      <pre>{manager} run deploy</pre>\n      <Instructions2 repo={repo} />\n    </div>\n  );\n}\n\nexport default Instructions;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/form/Form\";\nimport Instructions from \"./components/instructions/Instructions\";\n\nconst intialData = {\n  ghname: \"<github username>\",\n  repo: \"<github repo name>\",\n  manager: \"yarn\",\n};\n\nfunction App(props) {\n  const [formData, setFormData] = useState(intialData);\n\n  const update = (event) => {\n    let newFormData = { ...formData };\n    newFormData[event.target.name] =\n      event.target.value.trim().length > 0\n        ? event.target.value\n        : intialData[event.target.name];\n    setFormData(newFormData);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Make a GitHub Page for Create-React-App</h1>\n      <Form update={update} />\n      <Instructions {...formData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}